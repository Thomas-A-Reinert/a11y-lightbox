// set the prefix for transition values where applicable: transform, background-clip, etc.
@function prefix($property) {
    $vendor-prefixed-properties: transform background-clip background-size;
    $result: ();
    @if index($vendor-prefixed-properties, $property) {
      $property: -webkit-#{$property}
    }
    $result: append($result, $property);
    @return $result;
}

// Separate each transition value to be able to check if a prefix is needed.
@function trans-prefix($transition) {
    $prefixed: ();
    @each $trans in $transition {
        $prop-name: nth($trans, 1); // get the first elm from the list, this is the element that needs a transition;
        $vendor-prop-name: prefix($prop-name); // check if $prop-name list contains a value that needs a prefix
        $prop-vals: nth($trans, 2); // gather all other values
        $prefixed: append($prefixed, ($vendor-prop-name $prop-vals), comma);
    }

    @return $prefixed;
}

@mixin transition($values...) {
  $transitions: ();
    @each $declaration in $values {
        $prop: nth($declaration, 1); //get first elm of the list
        $prop-opts: ();
        $length: length($declaration);
        // get all properties counting from 2 (1 = transition property)
        @for $i from 2 through $length {
            $prop-opts: append($prop-opts, nth($declaration, $i));
        }
        $trans: ($prop, $prop-opts);
        $transitions: append($transitions, $trans, comma);
    }

    -webkit-transition: trans-prefix($transitions);
    transition: $values;
}

@mixin transform($arguments...) {
  -ms-transform: $arguments; //IE9
  -moz-transform: $arguments; //FF 10
  -webkit-transform: $arguments;
  transform: $arguments;
}

@mixin transform-origin($arguments...) {
    -webkit-transform-origin: $arguments;
    transform-origin: $arguments;
}

@mixin transform-style($arguments...) {
    -webkit-transform-style: $arguments;
    transform-style: $arguments;
}
